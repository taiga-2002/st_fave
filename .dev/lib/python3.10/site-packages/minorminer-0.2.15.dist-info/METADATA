Metadata-Version: 2.1
Name: minorminer
Version: 0.2.15
Summary: heuristic algorithm to find graph minor embeddings
Author-email: Kelly Boothby <boothby@dwavesys.com>
Maintainer-email: "D-Wave Inc." <tools@dwavesys.com>
License: Apache License
        
                                   Version 2.0, January 2004
                                   
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
Project-URL: Homepage, https://github.com/dwavesystems/minorminer
Project-URL: Download, https://github.com/dwavesystems/minorminer/releases
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.8
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: dwave-networkx >=0.8.10
Requires-Dist: fasteners >=0.15
Requires-Dist: homebase >=1.0.1
Requires-Dist: networkx >=2.4
Requires-Dist: numpy >=1.21.6
Requires-Dist: scipy >=1.7.3

.. image:: https://img.shields.io/pypi/v/minorminer.svg
    :target: https://pypi.org/project/minorminer

.. image:: https://img.shields.io/pypi/pyversions/minorminer.svg
    :target: https://pypi.python.org/pypi/minorminer

.. image:: https://circleci.com/gh/dwavesystems/minorminer.svg?style=svg
    :target: https://circleci.com/gh/dwavesystems/minorminer

.. image:: https://img.shields.io/badge/arXiv-1406.2741-b31b1b.svg
    :target: https://arxiv.org/abs/1406.2741

.. image:: https://img.shields.io/badge/arXiv-1507.04774-b31b1b.svg
    :target: https://arxiv.org/abs/1507.04774

.. index-start-marker

==========
minorminer
==========

`minorminer` is a heuristic tool for minor embedding: given a minor and target
graph, it tries to find a mapping that embeds the minor into the target.

.. index-end-marker

.. general-embedding-start-marker

The primary utility function, ``find_embedding()``, is an implementation of
the heuristic algorithm described in [1]. It accepts various optional parameters
used to tune the algorithm's execution or constrain the given problem.

This implementation performs on par with tuned, non-configurable implementations
while providing users with hooks to easily use the code as a basic building
block in research.

[1] https://arxiv.org/abs/1406.2741

Another function, ``find_clique_embedding()``, can be used to find clique embeddings
for Chimera, Pegasus, and Zephyr graphs in polynomial time. It is an implementation
of the algorithm described in [2]. There are additional utilities for finding
biclique embeddings as well.

[2] https://arxiv.org/abs/1507.04774

.. general-embedding-end-marker

Python
======

Installation
------------

.. install-python-start

pip installation is recommended for platforms with precompiled wheels posted to
pypi. Source distributions are provided as well.

.. code-block:: bash

    pip install minorminer

To install from this repository, you will need to first fetch the submodules

    git submodule init
    git submodule update

and then run the `setuptools` script.

.. code-block:: bash


    pip install -r requirements.txt
    python setup.py install
    # optionally, run the tests to check your build
    pip install -r test_requirements.txt
    python -m pytest .


.. install-python-end

Examples
--------

.. code-block:: python

    from minorminer import find_embedding

    # A triangle is a minor of a square.
    triangle = [(0, 1), (1, 2), (2, 0)]
    square = [(0, 1), (1, 2), (2, 3), (3, 0)]

    # Find an assignment of sets of square variables to the triangle variables
    embedding = find_embedding(triangle, square, random_seed=10)
    print(len(embedding))  # 3, one set for each variable in the triangle
    print(embedding)
    # We don't know which variables will be assigned where, here are a
    # couple possible outputs:
    # [[0, 1], [2], [3]]
    # [[3], [1, 0], [2]]

.. code-block:: python

    # We can insist that variable 0 of the triangle will always be assigned to [2]
    embedding = find_embedding(triangle, square, fixed_chains={0: [2]})
    print(embedding)
    # [[2], [3, 0], [1]]
    # [[2], [1], [0, 3]]
    # And more, but all of them start with [2]

.. code-block:: python

    # If we didn't want to force variable 0 to stay as [2], but we thought that
    # was a good start we could provide it as an initialization hint instead.
    embedding = find_embedding(triangle, square, initial_chains={0: [2]})
    print(embedding)
    # [[2], [0, 3], [1]]
    # [[0], [3], [1, 2]]
    # Output where variable 0 has switched to something else is possible again.

.. code-block:: python

    import networkx as nx

    # An example on some less trivial graphs
    # We will try to embed a fully connected graph with 6 nodes, into a
    # random regular graph with degree 3.
    clique = nx.complete_graph(6).edges()
    target_graph = nx.random_regular_graph(d=3, n=30).edges()

    embedding = find_embedding(clique, target_graph)

    print(embedding)
    # There are many possible outputs for this, sometimes it might even fail
    # and return an empty list

A more fleshed out example can be found under `examples/fourcolor.py`

.. code-block:: bash

    cd examples
    pip install -r requirements.txt
    python fourcolor.py

Matlab (Deprecated)
===================

Matlab support is deprecated as of vesion 0.2.8, and we will not accept bug reports
in later versions.  The matlab interface has been broken for the entire 0.2 series,
and more than a year passed before this was discovered.  It will be fixed in the 
0.2.8 release, but the matlab support infrastructure will be removed entirely in
May 2023, unless community developers volunteer to maintain it.

Installation
------------

.. install-matlab-start

The mex bindings for this library will work with some versions of 2013 and earlier,
and versions from 2016b an onward. An example build command used in Ubuntu is
found in the makefile `matlab/make.m`.

If you run `make` in the `matlab` directory on Ubuntu it should generate
`find_embedding.mexa64`, which can be added to the MATLAB path.

.. install-matlab-end

Examples
--------

.. code-block:: matlab

    % A triangle is a minor of a square.
    triangle = triu(ones(3),1);
    square = sparse([1,2,3,4],[2,3,4,1],[1,1,1,1],4,4);

    % Find an assignment of sets of square variables to the triangle variables
    options = struct('random_seed',10);
    embedding = find_embedding_matlab_wrapper(triangle, square, options)
    % typically in matlab we use indices starting at one rather than 0:
    embedding = cellfun(@(x)x+1,embedding,'UniformOutput',false);
    embedding{:}

.. code-block:: matlab

    % We can insist that variable 0 of the triangle will always be assigned to
    % [2] (zero-indexed)
    chains = cell(1);
    chains{1} = 2;
    options = struct();
    options.fixed_chains = chains;
    embedding = find_embedding(triangle, square, options)
    embedding{:}

.. code-block:: matlab

    % If we didn't want to force variable 0 to stay as [2], but we thought that
    % was a good start we could provide it as an initialization hint instead.
    options = struct();
    options.initial_chains = chains;
    embedding = find_embedding(triangle, square, options)
    embedding{:}

C++
===

Installation
------------

.. install-c-start

The `CMakeLists.txt` in the root of this repo will build the library and
optionally run a series of tests. On Linux, the commands would be something like
this:

.. code-block:: bash

    mkdir build; cd build
    cmake ..
    make

To build the tests, turn the CMake option `MINORMINER_BUILD_TESTS` on. The
command line option for CMake to do this would be `-DMINORMINER_BUILD_TESTS=ON`.

Library Usage
-------------

C++11 programs should be able to use this as a header-only library. If your
project is using CMake, this library can be used fairly simply; if you have
checked out this repo as `externals/minorminer` in your project, you would need
to add the following lines to your `CMakeLists.txt`

.. code-block:: CMake

    add_subdirectory(externals/minorminer)

    # After your target is defined
    target_link_libraries(your_target minorminer pthread)

.. install-c-end

Examples
--------

A minimal buildable example can be found in this repo under
`examples/example.cpp`.

.. code-block:: bash

    cd examples
    g++ example.cpp -std=c++11 -o example -pthread

This can also be built using the included `CMakeLists.txt` along with the main
library build by turning the CMake option `MINORMINER_BUILD_EXAMPLES` on. The
command line option for CMake to do this would be
`-DMINORMINER_BUILD_EXAMPLES=ON`.

License
=======

Released under the Apache License 2.0. See `<LICENSE>`_ file.

Contributing
============

Ocean's `contributing guide <https://docs.ocean.dwavesys.com/en/stable/contributing.html>`_
has guidelines for contributing to Ocean packages.

If you're interested in adding or modifying parameters of the ``find_embedding`` 
primary utility function, please see the `<parameter_checklist.txt>`_ file.

